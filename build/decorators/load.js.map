{"version":3,"sources":["../../src/decorators/load.js"],"names":["micro","client","key","callback","options","Promise","resolve","reject","hgetall","err","result","logger","error","code","message","promise","then","type","value","JSON","parse","search","Date"],"mappings":";;;;;;AAAA;;;;AACA;;;;AACA;;;;;;kBAEe,UAACA,KAAD,EAAQC,MAAR;AAAA,SAAmB,UAACC,GAAD,EAAMC,QAAN;AAAA,QAAgBC,OAAhB,uEAA0B,EAA1B;AAAA,WAAiC,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AAClGN,aAAOO,OAAP,CAAeN,GAAf,EAAoB,UAAUO,GAAV,EAAeC,MAAf,EAAuB;AACzC,YAAID,GAAJ,EAAS;AACPT,gBAAMW,MAAN,CAAaC,KAAb,CAAmBH,GAAnB;AACA,iBAAOF,OAAO;AACZM,oDAA0CJ,IAAII,IADlC;AAEZC,2JAAqCZ,GAArC;AAFY,WAAP,CAAP;AAID;;AAED,YAAIQ,WAAW,IAAf,EAAqB;;AAEnB,cAAI,sBAAWP,QAAX,CAAJ,EAA0B;AACxB,gBAAIY,UAAUZ,SAASD,GAAT,CAAd;;AAEA,gBAAI,CAACa,OAAD,IAAY,EAAE,UAAUA,OAAV,IAAqB,sBAAWA,QAAQC,IAAnB,CAAvB,CAAhB,EAAkE;AAChED,wBAAUV,QAAQC,OAAR,CAAgBS,OAAhB,CAAV;AACD;;AAED,mBAAOA,QACJC,IADI,CACC;AAAA,qBAAU,oBAAKhB,KAAL,EAAYC,MAAZ,EAAoBC,GAApB,EAAyBQ,MAAzB,CAAV;AAAA,aADD,EAEJM,IAFI,CAECV,OAFD,EAEUC,MAFV,CAAP;AAGD;;AAED,iBAAOD,QAAQI,MAAR,CAAP;AACD;;AAxBwC,YA0BnCO,IA1BmC,GA0BnBP,MA1BmB,CA0BnCO,IA1BmC;AAAA,YA0B7BC,KA1B6B,GA0BnBR,MA1BmB,CA0B7BQ,KA1B6B;;;AA4BzCZ,gBAAQa,KAAKC,KAAL,CAAWF,KAAX,EAAkB,UAAShB,GAAT,EAAcgB,KAAd,EAAqB;AAC7C,cAAI,CAAC,CAACA,KAAF,IAAW,CAAC,CAACA,MAAMG,MAAnB,IAA6B,CAAC,CAAC,CAACH,MAAMG,MAAN,CAAa,2GAAb,CAApC,EAA+J;AAC7J,mBAAO,IAAIC,IAAJ,CAASJ,KAAT,CAAP;AACD;AACD,iBAAOA,KAAP;AACD,SALO,CAAR;AAMD,OAlCD;AAmCD,KApCkE,CAAjC;AAAA,GAAnB;AAAA,C","file":"load.js","sourcesContent":["import isFunction from 'lodash.isfunction';\nimport upcast from '../utils/upcast';\nimport save from './save';\n\nexport default (micro, client) => (key, callback, options = {}) => new Promise((resolve, reject) => {\n  client.hgetall(key, function (err, result) {\n    if (err) {\n      micro.logger.error(err);\n      return reject({\n        code   : `error.plugin-cache-redis.get/${ err.code }`,\n        message: `Попытка получения ключа ${ key } привела к ошибке`\n      });\n    }\n\n    if (result === null) {\n\n      if (isFunction(callback)) {\n        let promise = callback(key);\n\n        if (!promise || !('then' in promise && isFunction(promise.then))) {\n          promise = Promise.resolve(promise);\n        }\n\n        return promise\n          .then(result => save(micro, client)(key, result))\n          .then(resolve, reject);\n      }\n\n      return resolve(result);\n    }\n\n    let { type, value } = result;\n\n    resolve(JSON.parse(value, function(key, value) {\n      if (!!value && !!value.search && !!~value.search(/^[0-9]{4}[-]{1}[0-9]{2}[-]{1}[0-9]{2}[A-Z]{1}[0-9]{2}[:]{1}[0-9]{2}[:]{1}[0-9]{2}[\\.]{1}[0-9]{3}[A-Z]{1}$/)) {\n        return new Date(value);\n      }\n      return value;\n    }));\n  });\n});"]}