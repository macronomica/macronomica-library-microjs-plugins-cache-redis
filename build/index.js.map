{"version":3,"sources":["../src/index.js"],"names":["DRIVER","driver","connection","micro","name","pluginId","plugin","id","client","queue","case","args","done","Promise","resolve","reject","createClient","retry_strategy","retryStrategy","on","errorCallback","error","quit","process","nextTick","middleware","get","del","set","options","code","Error","total_retry_time","times_connected","undefined","Math","max","attempt","logger","message","toString"],"mappings":";;;;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;;;;;AACA,IAAMA,SAAS,OAAf;;kBAEe;AAAA,iFAAoC,EAApC;AAAA,MAAUA,MAAV,QAAGC,MAAH;AAAA,MAAqBC,UAArB;;AAAA,SAA2C,UAACC,KAAD,EAAQC,IAAR,EAAcC,QAAd,EAA2B;AACnF,QAAMC,SAAS,EAAEF,UAAF,EAAQG,IAAIF,QAAZ,EAAf;AACA,QAAIG,gBAAJ;;AAEAL,UACGM,KADH,CACS;AACLC,YAAM,MADD;AAELC,YAAM,EAFD;AAGLC,YAAM;AAAA,eAAM,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AAC3CP,oBAAS,gBAAWQ,YAAX,cACJd,UADI;AAEPe,4BAAgBC;AAFT,aAAT;;AAKAV,kBACGW,EADH,CACM,OADN,EACeC,cAAcjB,KAAd,CADf,EAEGgB,EAFH,CAEM,OAFN,EAEe,iBAAS;AACpB,gBAAIE,KAAJ,EAAW;AACTD,4BAAcjB,KAAd,EAAqBkB,KAArB;AACA,qBAAON,OAAOM,KAAP,CAAP;AACD;;AAEDP;AACD,WATH;AAWD,SAjBW,CAAN;AAAA;AAHD,KADT,EAuBGL,KAvBH,CAuBS;AACLC,YAAM,OADD;AAELC,YAAM,EAFD;AAGLC,YAAM;AAAA,eAAM,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AAC3C,cAAI,CAACP,OAAL,EAAa;AACX,mBAAOM,SAAP;AACD;;AAEDN,kBAAOc,IAAP;AACAC,kBAAQC,QAAR,CAAiB;AAAA,mBAAMV,SAAN;AAAA,WAAjB;AACD,SAPW,CAAN;AAAA;AAHD,KAvBT;;AAoCA,WAAO;AACLW,iCADK;AAELjB,YAFK,oBAEI;AAAE,eAAOA,OAAP;AAAe,OAFrB;;AAGLkB,WAAK;AAAA,eAAa,sBAAIvB,KAAJ,EAAWK,OAAX,6BAAb;AAAA,OAHA;AAILmB,WAAK;AAAA,eAAa,sBAAIxB,KAAJ,EAAWK,OAAX,6BAAb;AAAA,OAJA;AAKLoB,WAAK;AAAA,eAAa,sBAAIzB,KAAJ,EAAWK,OAAX,6BAAb;AAAA;AALA,KAAP;AAOD,GA/Cc;AAAA,C;;AAiDf,SAASU,aAAT,CAAuBW,OAAvB,EAAgC;AAC9B,MAAIA,QAAQR,KAAR,CAAcS,IAAd,KAAuB,cAA3B,EAA2C;AACzC;AACA,WAAO,IAAIC,KAAJ,CAAU,mCAAV,CAAP;AACD;AACD,MAAIF,QAAQG,gBAAR,GAA2B,OAAO,EAAP,GAAY,EAA3C,EAA+C;AAC7C;AACA,WAAO,IAAID,KAAJ,CAAU,sBAAV,CAAP;AACD;AACD,MAAIF,QAAQI,eAAR,GAA0B,EAA9B,EAAkC;AAChC;AACA,WAAOC,SAAP;AACD;AACD;AACA,SAAOC,KAAKC,GAAL,CAASP,QAAQQ,OAAR,GAAkB,GAA3B,EAAgC,IAAhC,CAAP;AACD;;AAED,SAASjB,aAAT,CAAuBjB,KAAvB,EAA8B;AAC5B,SAAO,iBAAS;AACd,QAAI,CAAC,CAACkB,KAAN,EAAa;AACXlB,YAAMmC,MAAN,CAAajB,KAAb,CAAmB,mCAAnB,EAAwD;AACtDS,4CAAsCT,MAAMS,IADU;AAEtDS,iBAASlB,MAAMkB,OAAN,CAAcC,QAAd;AAF6C,OAAxD;AAID;AACF,GAPD;AAQD","file":"index.js","sourcesContent":["import middleware from 'redis';\nimport del from './del-key';\nimport set from './set-key';\nimport get from './get-key';\nconst DRIVER = 'redis';\n\nexport default ({ driver:DRIVER, ...connection } = {}) => (micro, name, pluginId) => {\n  const plugin = { name, id: pluginId };\n  let client;\n  \n  micro\n    .queue({\n      case: 'wait',\n      args: [],\n      done: () => new Promise((resolve, reject) => {\n        client = middleware.createClient({\n          ...connection,\n          retry_strategy: retryStrategy\n        });\n  \n        client\n          .on(\"error\", errorCallback(micro))\n          .on(\"ready\", error => {\n            if (error) {\n              errorCallback(micro)(error);\n              return reject(error);\n            }\n            \n            resolve();\n          })\n        ;\n      })\n    })\n    .queue({\n      case: 'close',\n      args: [],\n      done: () => new Promise((resolve, reject) => {\n        if (!client) {\n          return resolve();\n        }\n        \n        client.quit();\n        process.nextTick(() => resolve());\n      })\n    });\n\n  return {\n    middleware,\n    client() { return client },\n    get: (...rest) => get(micro, client)(...rest),\n    del: (...rest) => del(micro, client)(...rest),\n    set: (...rest) => set(micro, client)(...rest)\n  }\n}\n\nfunction retryStrategy(options) {\n  if (options.error.code === 'ECONNREFUSED') {\n    // End reconnecting on a specific error and flush all commands with a individual error\n    return new Error('The server refused the connection');\n  }\n  if (options.total_retry_time > 1000 * 60 * 60) {\n    // End reconnecting after a specific timeout and flush all commands with a individual error\n    return new Error('Retry time exhausted');\n  }\n  if (options.times_connected > 10) {\n    // End reconnecting with built in error\n    return undefined;\n  }\n  // reconnect after\n  return Math.max(options.attempt * 100, 3000);\n}\n\nfunction errorCallback(micro) {\n  return error => {\n    if (!!error) {\n      micro.logger.error('The server refused the connection', {\n        code   : `error.plugin-cache-redis/${ error.code }`,\n        message: error.message.toString()\n      })\n    }\n  }\n}"]}