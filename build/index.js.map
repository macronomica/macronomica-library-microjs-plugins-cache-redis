{"version":3,"sources":["../src/index.js"],"names":["DRIVER","driver","settings","micro","name","pluginId","plugin","id","middleware","client","__decorators","queue","case","args","done","then","applyDecorators","Proxy","get","target","property","rest","Promise","resolve","reject","err","result","Object","keys","forEach","key"],"mappings":";;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;;;AAEA,IAAMA,SAAS,OAAf;;kBAEe;AAAA,iFAAoC,EAApC;AAAA,yBAAGC,MAAH;AAAA,MAAGA,MAAH,+BAAYD,MAAZ;AAAA,MAAuBE,QAAvB;;AAAA,SAA2C,UAACC,KAAD,EAAQC,IAAR,EAAcC,QAAd,EAA2B;AACnF,QAAMC,SAAS,EAAEC,IAAIF,QAAN,EAAgBD,UAAhB,EAAsBI,2BAAtB,EAAkCC,QAAQ,IAA1C,EAAf;AACA,QAAMC,eAAe,EAArB;;AAEAP,UACGQ,KADH,CACS;AACLC,YAAM,MADD;AAELC,YAAM,EAFD;AAGLC,YAAM;AAAA,eAAM,uBAAQX,KAAR,mBAA2BD,QAA3B,EACTa,IADS,CACJ;AAAA,iBAAUT,OAAOG,MAAP,GAAgBA,MAA1B;AAAA,SADI,EAETM,IAFS,CAEJC,gBAAgBb,KAAhB,EAAuBO,YAAvB,CAFI,CAAN;AAAA;AAHD,KADT,EAQGC,KARH,CAQS;AACLC,YAAM,OADD;AAELC,YAAM,EAFD;AAGLC,YAAM;AAAA,eAAM,0BAAWR,OAAOG,MAAlB,CAAN;AAAA;AAHD,KART;;AAcA,WAAO,IAAIQ,KAAJ,CAAUX,MAAV,EAAkB;AACvBY,SADuB,eACnBC,MADmB,EACXC,QADW,EACD;AACpB,YAAIA,YAAYD,MAAhB,EAAwB;AACtB,iBAAOA,OAAQC,QAAR,CAAP;AACD;;AAED,YAAIA,YAAYV,YAAhB,EAA8B;AAC5B,iBAAOA,aAAcU,QAAd,CAAP;AACD;;AAED,YAAI,sBAAWd,OAAOG,MAAP,CAAeW,QAAf,CAAX,CAAJ,EAA2C;AACzC,iBAAO;AAAA,8CAAIC,IAAJ;AAAIA,kBAAJ;AAAA;;AAAA,mBAAa,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV;AAAA;;AAAA,qBAC9B,yBAAOf,MAAP,EAAeW,QAAf,wBAA6BC,IAA7B,SAAmC,UAACI,GAAD,EAAMC,MAAN;AAAA,uBAAiBD,MAAMD,OAAOC,GAAP,CAAN,GAAoBF,QAAQG,MAAR,CAArC;AAAA,eAAnC,GAD8B;AAAA,aAAZ,CAAb;AAAA,WAAP;AAED;;AAED,eAAOpB,OAAOG,MAAP,CAAeW,QAAf,CAAP;AACD;AAhBsB,KAAlB,CAAP;AAkBD,GApCc;AAAA,C;;AAsCf,SAASJ,eAAT,CAAyBb,KAAzB,EAAgCO,YAAhC,EAA8C;AAC5C,SAAO;AAAA,WAAUiB,OACdC,IADc,uBAEdC,OAFc,CAEN,eAAO;AACd,UAAI,sBAAW,qBAAYC,GAAZ,CAAX,CAAJ,EAAmC;AACjCpB,qBAAcoB,GAAd,IAAsB,qBAAYA,GAAZ,EAAkB3B,KAAlB,EAAyBM,MAAzB,CAAtB;AACD,OAFD,MAEO;AACLC,qBAAcoB,GAAd,IAAsB,qBAAYA,GAAZ,CAAtB;AACD;AACF,KARc,CAAV;AAAA,GAAP;AASD","file":"index.js","sourcesContent":["import middleware from 'redis';\nimport isFunction from 'lodash.isfunction';\nimport connect from './connect';\nimport disconnect from './disconnect';\nimport decorators from './decorators';\n\nconst DRIVER = 'redis';\n\nexport default ({ driver = DRIVER, ...settings } = {}) => (micro, name, pluginId) => {\n  const plugin = { id: pluginId, name, middleware, client: null };\n  const __decorators = {};\n  \n  micro\n    .queue({\n      case: 'wait',\n      args: [],\n      done: () => connect(micro, middleware, settings)\n        .then(client => plugin.client = client)\n        .then(applyDecorators(micro, __decorators))\n    })\n    .queue({\n      case: 'close',\n      args: [],\n      done: () => disconnect(plugin.client)\n    });\n\n  return new Proxy(plugin, {\n    get(target, property) {\n      if (property in target) {\n        return target[ property ];\n      }\n      \n      if (property in __decorators) {\n        return __decorators[ property ];\n      }\n      \n      if (isFunction(plugin.client[ property ])) {\n        return (...rest) => new Promise((resolve, reject) =>\n          plugin.client[ property ](...rest, (err, result) => err ? reject(err) : resolve(result)))\n      }\n    \n      return plugin.client[ property ];\n    }\n  })\n}\n\nfunction applyDecorators(micro, __decorators) {\n  return client => Object\n    .keys(decorators)\n    .forEach(key => {\n      if (isFunction(decorators[ key ])) {\n        __decorators[ key ] = decorators[ key ](micro, client)\n      } else {\n        __decorators[ key ] = decorators[ key ];\n      }\n    })\n}"]}