{"version":3,"sources":["../../src/test/save-load.spec.js"],"names":["should","micro","plugin","Date","now","KEY","before","done","args","after","describe","it","read","then","equal","result","write","be","a","del","Promise","resolve"],"mappings":";;AAAA;;;;AACA;;;;AACA;;;;;;AAEA,IAAMA,SAAS,eAAKA,MAAL,EAAf;AACA,IAAMC,QAAQ,kBAAd;AACA,IAAMC,SAAS,qBAAO,EAAP,EAAWD,KAAX,EAAkB,MAAlB,EAA0BE,KAAKC,GAAL,EAA1B,CAAf;AACA,IAAMC,MAAM,UAAZ;;AAEAC,OAAO;AAAA;;AAAA,SAAM,uBAAMA,MAAN,EAAaC,IAAb,yCAAqBN,MAAMK,MAAN,CAAaE,IAAlC,EAAN;AAAA,CAAP;;AAEAC,MAAM;AAAA;;AAAA,SAAM,sBAAMA,KAAN,EAAYF,IAAZ,wCAAoBN,MAAMQ,KAAN,CAAYD,IAAhC,EAAN;AAAA,CAAN;;AAEAE,SAAS,aAAT,EAAwB,YAAW;;AAEjCC,KAAG,qCAAH,EAA0C;AAAA,WACxCT,OACGU,IADH,CACQP,GADR,EAEGQ,IAFH,CAEQ;AAAA,aAAUb,OAAOc,KAAP,CAAa,IAAb,EAAmBC,MAAnB,CAAV;AAAA,KAFR,CADwC;AAAA,GAA1C;;AAMAJ,KAAG,qDAAH,EAA0D;AAAA,WACxDT,OACGc,KADH,CACSX,GADT,cAEGQ,IAFH,CAEQ;AAAA,aAAMX,OAAOU,IAAP,CAAYP,GAAZ,CAAN;AAAA,KAFR,EAGGQ,IAHH,CAGQ;AAAA,aAAUE,OAAOf,MAAP,CAAciB,EAAd,CAAiBC,CAAjB,CAAmB,QAAnB,CAAV;AAAA,KAHR,EAIGL,IAJH,CAIQ;AAAA,aAAMX,OAAOiB,GAAP,CAAWd,GAAX,CAAN;AAAA,KAJR,CADwD;AAAA,GAA1D;;AASAM,KAAG,kDAAH,EAAuD,YAAM;AAC3D,WAAOT,OACJU,IADI,CACCP,GADD,EACM;AAAA;AAAA,KADN,EAEJQ,IAFI,CAEC;AAAA,aAAUb,OAAOc,KAAP,aAAmBC,MAAnB,CAAV;AAAA,KAFD,EAGJF,IAHI,CAGC;AAAA,aAAMX,OAAOiB,GAAP,CAAWd,GAAX,CAAN;AAAA,KAHD,CAAP;AAID,GALD;;AAOAM,KAAG,4DAAH,EAAiE,YAAM;AACrE,WAAOT,OACJU,IADI,CACCP,GADD,EACM;AAAA,aAAOe,QAAQC,OAAR,YAAP;AAAA,KADN,EAEJR,IAFI,CAEC;AAAA,aAAUb,OAAOc,KAAP,aAAmBC,MAAnB,CAAV;AAAA,KAFD,EAGJF,IAHI,CAGC;AAAA,aAAMX,OAAOiB,GAAP,CAAWd,GAAX,CAAN;AAAA,KAHD,CAAP;AAID,GALD;AAMD,CA9BD","file":"save-load.spec.js","sourcesContent":["import chai from 'chai';\nimport Plugin from '../index';\nimport { MICRO, DATA } from './data';\n\nconst should = chai.should();\nconst micro = MICRO();\nconst plugin = Plugin({})(micro, 'test', Date.now());\nconst KEY = 'test-key';\n\nbefore(() => micro.before.done(...micro.before.args));\n\nafter(() => micro.after.done(...micro.after.args));\n\ndescribe('save / load', function() {\n  \n  it('#plugin.load -> должен вернуть null', () =>\n    plugin\n      .read(KEY)\n      .then(result => should.equal(null, result))\n  );\n  \n  it('#plugin.save + plugin.load -> должен вернуть объект', () =>\n    plugin\n      .write(KEY, DATA)\n      .then(() => plugin.read(KEY))\n      .then(result => result.should.be.a('object'))\n      .then(() => plugin.del(KEY))\n  );\n  \n  \n  it('#plugin.read + callback -> должен вернуть объект', () => {\n    return plugin\n      .read(KEY, key => DATA)\n      .then(result => should.equal(DATA, result))\n      .then(() => plugin.del(KEY));\n  });\n  \n  it('#plugin.read + callback():Promise -> должен вернуть объект', () => {\n    return plugin\n      .read(KEY, key => Promise.resolve(DATA))\n      .then(result => should.equal(DATA, result))\n      .then(() => plugin.del(KEY));\n  });\n});"]}