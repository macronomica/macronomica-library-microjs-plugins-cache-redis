{"version":3,"sources":["../../src/utils/upcast.js"],"names":["upcast","guardTypeArg","type","Error","alias","a","arr","array","b","bool","boolean","f","fn","n","num","number","o","obj","object","s","str","string","resolve","val","Object","prototype","toString","call","is","to","from","cast","caster","Number","split","length","isNaN","join"],"mappings":"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","file":"upcast.js","sourcesContent":["const upcast = {};\n  \n  // Utilities\n  // ------------\n  \n  // Guard a 'type' argument\n  function guardTypeArg (type) {\n    if (typeof type !== 'string') {\n      throw new Error('Invalid argument: type is expected to be a string');\n    }\n  }\n  \n  \n  // Type aliases\n  // ------------\n  \n  // Define aliases\n  var alias = upcast.alias = {};\n  alias.a = alias.arr = alias.array = 'array';\n  alias.b = alias.bool = alias.boolean = 'boolean';\n  alias.f = alias.fn = alias[ 'function' ] = 'function';\n  alias[ 'null' ] = 'null';\n  alias.n = alias.num = alias.number = 'number';\n  alias.o = alias.obj = alias.object = 'object';\n  alias.s = alias.str = alias.string = 'string';\n  alias[ 'undefined' ] = 'undefined';\n  \n  // Resolve type aliases\n  function resolve (type) {\n    return upcast.alias[ type ] || type;\n  }\n  upcast.resolve = resolve;\n  \n  \n  // Get type\n  // --------\n  \n  // Get an object's type\n  function type (val) {\n    if (val === null) {\n      return 'null';\n    }\n    if (Object.prototype.toString.call(val) === '[object Array]') {\n      return 'array';\n    }\n    return typeof val;\n  }\n  upcast.type = type;\n  \n  \n  // Check type\n  // ----------\n  \n  // Check whether an object is of a certain type\n  function is (val, type) {\n    guardTypeArg(type);\n    return (upcast.type(val) === upcast.resolve(type));\n  }\n  upcast.is = is;\n  \n  \n  // Cast\n  // ----\n  \n  // Cast an object to a given type\n  function to (val, type) {\n    guardTypeArg(type);\n    \n    // Get type and return if already correct\n    type = upcast.resolve(type);\n    var from = upcast.type(val);\n    if (type === from) {\n      return val;\n    }\n    \n    // Get a caster and cast!\n    if (!to.cast[ type ]) {\n      return val;\n    }\n    var caster = to.cast[ type ][ from ] || to.cast[ type ];\n    return caster(val);\n    \n  }\n  upcast.to = to;\n  \n  // Default casters\n  var cast = to.cast = {\n    array (val) {\n      return [ val ];\n    },\n    boolean (val) {\n      return (val ? true : false);\n    },\n    'function': function (val) {\n      return function () { return val };\n    },\n    'null': function () {\n      return null;\n    },\n    number (val) {\n      return Number(val);\n    },\n    object (val) {\n      return new Object(val);\n    },\n    string (val) {\n      return val + '';\n    },\n    'undefined': function () {\n      return void 0;\n    }\n  };\n  \n  // Special casters\n  cast.array[ 'null' ] = cast.array[ 'undefined' ] = function () {\n    return [];\n  };\n  cast.array.string = function (val) {\n    return val.split('');\n  };\n  cast.boolean.array = function (val) {\n    return val.length > 0;\n  };\n  cast.number.array = function (val) {\n    return to(to(val, 'string'), 'number');\n  };\n  cast.number.string = function (val) {\n    var num = Number(val, 10);\n    return (isNaN(num) ? 0 : num);\n  };\n  cast.number[ 'undefined' ] = function () {\n    return 0;\n  };\n  cast.string.array = function (val) {\n    return val.join('');\n  };\n  cast.string[ 'null' ] = cast.string[ 'undefined' ] = function () {\n    return '';\n  };\n  \nexport default upcast;"]}